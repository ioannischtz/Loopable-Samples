cmake_minimum_required(VERSION 3.4.1)

# Require C++17 compiler with no extensions
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Pull in obo
set(OBOE_DIR ../../../../../oboe)
message("OBOE_DIR = " + ${OBOE_DIR})

# Pull in AudioSources
set(AUDIOSOURCES_DIR AudioSources)

# Pull in Callbacks
set(CALLBACKS_DIR Callbacks)

# Pull in Interfaces
set(INTERFACES_DIR Interfaces)

# Pull in Utilities
set(UTILITIES_DIR Utilities)

# Add the Oboe library as a subproject. Since Oboe is an out-of-tree source library we must also
# specify a binary directory
add_subdirectory(${OBOE_DIR} ./oboe-bin)

# include folders
include_directories(
        ${OBOE_DIR}/include
        ${OBOE_DIR}/src/flowgraph
        ${AUDIOSOURCES_DIR}
        ${CALLBACKS_DIR}
        ${INTERFACES_DIR}
        ${UTILITIES_DIR}
        ${CMAKE_CURRENT_LIST_DIR}
)

# App specific sources
set(APP_SOURCES
        AudioEngine.cpp
        jni_bridge.cpp
        ${AUDIOSOURCES_DIR}/AAssetDataSource.cpp
        ${AUDIOSOURCES_DIR}/LoopableAAssetAudio.cpp
        ${CALLBACKS_DIR}/LatencyTuningCallback.cpp
        ${UTILITIES_DIR}/trace.cpp
        )

# Build the libaudioengine library
add_library(audioengine SHARED
        ${APP_SOURCES}
        )

# Enable optimization flags: if having problems with source level debugging,
# disable -Ofast ( and debug ), re-enable after done debugging.
#target_compile_options(native-lib PRIVATE -Wall -Werror "$<$<CONFIG:RELEASE>:-Ofast>")

# Compile with warnings for safety
if (MSVC)
    target_compile_options(audioengine PRIVATE /W4 /WX)
else ()
    target_compile_options(audioengine PRIVATE -Wall -Wextra -pedantic)
endif ()

target_compile_options(audioengine PRIVATE -Ofast)

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
        log-lib
        # Specifies the name of the NDK library that
        # you want CMake to locate.
        log)

# Specify the libraries which our native library is dependent on, including Oboe
target_link_libraries(
        audioengine

        android

        oboe

        ${log-lib}
)